# Data Loader

import io
import pandas as pd
import requests
if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@data_loader
def load_data_from_api(*args, **kwargs):
    """
    Template for loading data from API
    """
    url1 = 'https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2020-10.csv.gz'
    url2 = 'https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2020-11.csv.gz'
    url3 = 'https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2020-12.csv.gz'
    
    taxi_dtypes = {
        'VendorID': pd.Int64Dtype(),
        'passenger_count': pd.Int64Dtype(),
        'trip_distance': float,
        'RatecodeID': pd.Int64Dtype(),
        'store_and_fwd_flag': str,
        'PULocationID': pd.Int64Dtype(),
        'DULocationID': pd.Int64Dtype(),
        'payment_type': pd.Int64Dtype(),
        'fare_amount': float,
        'extra': float,
        'mta_tax': float,
        'tip_amount': float,
        'tolls_amount': float,
        'improvement_surcharge': float,
        'total_amount': float,
        'congestion_surcharge': float
    }

    parse_dates = ['lpep_pickup_datetime', 'lpep_dropoff_datetime']

    files = [url1,url2,url3]

    df = pd.DataFrame()
    for file in files:
        df = pd.concat([df,pd.read_csv(file, sep=",", compression="gzip", dtype=taxi_dtypes, parse_dates=parse_dates)])
    
    return df

@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'


# Transformer

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    print("Rows with zero passengers: ", data['passenger_count'].isin([0]).sum())
    print("Rows with zero trip distance: ", data['trip_distance'].isin([0.00]).sum())

    #return data[~data['passenger_count'].isin([0]) & ~data['trip_distance'].isin([0.00])]
    #data = data['passenger_count'] > 0 
    #data = data['trip_distance'] > 0

    data = data.query('passenger_count > 0 & trip_distance > 0')
    data['lpep_pickup_date'] = data['lpep_pickup_datetime'].dt.date
    data.rename(columns = {'VendorID':'vendor_id', 'RatecodeID':'rate_code_id','PULocationID':'pu_location_id', 'DULocationID':'do_location_id'}, inplace = True) 
    return data

@test
def test_output(output, *args): 
    """
    Template code for testing the output of the block.
    """
    assert output['passenger_count'].isin([0]).sum() == 0, 'The output contains trips with zero passengers'
    assert output['trip_distance'].isin([0]).sum() == 0, 'The output contains trips with zero trip distance'
    #assert output['vendor_id'].isin([1]).sum() == 0, '1 exists'
    #assert output['vendor_id'].isin([2]).sum() == 0, '2 exists'
    assert output['vendor_id'].isin([3]).sum() == 0, '3 exists'
    assert output['vendor_id'].isin([4]).sum() == 0, '4 exists'

# Data Exporter

from mage_ai.settings.repo import get_repo_path
from mage_ai.io.config import ConfigFileLoader
from mage_ai.io.postgres import Postgres
from pandas import DataFrame
from os import path

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


@data_exporter
def export_data_to_postgres(df: DataFrame, **kwargs) -> None:
    """
    Template for exporting data to a PostgreSQL database.
    Specify your configuration settings in 'io_config.yaml'.

    Docs: https://docs.mage.ai/design/data-loading#postgresql
    """
    schema_name = 'mageai'  # Specify the name of the schema to export data to
    table_name = 'green_taxi'  # Specify the name of the table to export data to
    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'dev'

    with Postgres.with_config(ConfigFileLoader(config_path, config_profile)) as loader:
        loader.export(
            df,
            schema_name,
            table_name,
            index=False,  # Specifies whether to include index in exported table
            if_exists='replace',  # Specify resolution policy if table name already exists
        )
